@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using chat.Shared;
@inject NavigationManager Navigation
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject HttpClient http
@implements IAsyncDisposable

<PageTitle>Global Chat</PageTitle>
@if (channel != null)
{
    <div>
        <p>@channel.Name</p>
        <p>@channel.Description</p>
        <p>@channel.Crea</p>
    </div>

    <div class="form-group">
        <label>
            Message:
            <input @bind="messageInput" size="50" />
        </label>
    </div>
    <button @onclick="Send" disabled="@(!IsConnected)">Send</button>

    <hr>


    <ul id="messagesList">
        @foreach (var m in channel.Messages)
        {
            <p><strong> @m.SenderId @m.Created.ToShortDateString()</strong>: @m.Content</p>
        }
    </ul>

}
else
{
    <p>loading</p>
}

@code {
    private HubConnection? hubConnection;
    private Channel channel;
    private string? userInput = String.Empty;
    private string? messageInput = String.Empty;

    protected override async Task OnInitializedAsync()
    {
        channel = await http.GetFromJsonAsync<Channel>("api/channel");
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/channel"))
            .Build();

        hubConnection.On<string, string, DateTime>("PublicMessage", (user, message, date) =>
        {
            var msg = new Message() { Content = message, SenderId = user, Created = date };
            if (channel.Messages != null)
                channel.Messages.Add(msg);
            StateHasChanged();
        });


        var user = (await GetAuthenticationStateAsync.GetAuthenticationStateAsync()).User;
        userInput = user.FindFirst(u => u.Type.Contains("sub"))?.Value;
        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", userInput, messageInput);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}